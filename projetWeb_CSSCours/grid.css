.base{
    width: 100vw;
    height: 100vh;
    background-color: black;
    display: flex;
}

.container{
    margin: auto;
    width: 600px;
    height: 600px;
    background-color: transparent;
    border: 5px dashed white;

    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: repeat(6, 1fr);
    /*pour ajouter automatiquement une ligne lorsque le nombre de lignes defini avec grid-template-rows ne suffit pas par rapport au nombre d'items*/
    grid-auto-rows: 1fr;

    /* la meme chose que ce qui precede mais pour les colones

    grid-auto-flow: column;
    grid-auto-colums: 1fr;
    */

    /* comme dans flexbox on peut utiliser

    justify-content: ... ;
    align-content: ... ;
    la propriete qui regroupe les deux est 

    place-content: <justify-content> <align-content>;




    justify-items: ... ;
    align-items: ... ;
    la propriete qui regroupe les deux est 

    place-items: <justify-items> <align-items>;


    dans flexbox on utilise flex-start ou flex-end pour certaines valeurs ici on mets seulement start et end
    
    
    de meme 
    justify-self: ... ;
    align-self: ... ;
    la propriete qui regroupe les deux

    place-self: <justify-self> <align-self> ;
    */

    gap: 10px;
    
    
}




.item1{
    grid-column-start: 2;
    grid-column-end: 4;
    grid-row-start: 1;
    grid-row-end: 3;
}
/*ou*/
.item1{
    grid-column: 2/4;
    grid-row: 1/3;
}
/*ou*/
.item1{
    grid-area: 1/2/3/4;
}


.item2{
    grid-column: 1/-1;
}

.item3{
    grid-column: 2/ span 2;
}

.item4{
    grid-row: span 2;
}

.item6{
    grid-column: -2/-1;
    grid-row: 1/2;
}




.items{
    /* width: 90px;
    height: 90px; */
    background-color: yellow;
    border-radius: 8px;

    display: flex;
    justify-content: center;
    align-items: center;
}


.items span{
    font-size: 30px;
    font-family: "monospace", "sans-serif";
    font-weight: 600;
}

.item1{
    background-color: cyan;
}



/*
Autres techniques

.container {
display: grid;
grid-template-areas: "header header header"
                     "sidebar content content"
                     "footer footer footer";
}

.item1{
    grid-area: header;
}

.item2{
    grid-area: content;
}

.item3{
    grid-area: sidebar;
}

.item4{
    grid-area: footer;
}


EXPLICATION!!!  Il y a trois colones et trois lignes 
le header, donc item1, occupe trois colones et la premier ligne
la sidebar, donc item2, occupe la premiere colone et la premiere ligne
le content, donc item3, occupe les deux dernieres colones et la deuxieme ligne
le footer, donc item4, occupe trois colones et la derniere ligne

c'est plus lisible
quand on veut mettre des espace vide on met des points par exemples

grid-template-areas: "header header ."
                     "sidebar content content"
                     "footer footer footer";
}

grid-template-areas: "header header header"
                     "sidebar . content"
                     "footer footer footer";
}

*/